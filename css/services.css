/* Modern Gray Theme */
:root {
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;
    --accent: #4777F5;
}

/* Animated Background */
.animated-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--gray-900);
    z-index: -1;
    overflow: hidden;
}

.gradient-sphere {
    position: absolute;
    width: 800px;
    height: 800px;
    background: var(--gray-800);
    filter: blur(80px);
    opacity: 0.6;
    border-radius: 100%;
    animation: sphereFloat 20s infinite ease-in-out;
}

.grid-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
        linear-gradient(var(--gray-800) 1px, transparent 1px),
        linear-gradient(90deg, var(--gray-800) 1px, transparent 1px);
    background-size: 50px 50px;
    opacity: 0.2;
}

/* Hero Styles */
.hero-container {
    min-height: 100vh;
    padding: 120px 0;
    position: relative;
}

.hero-content {
    color: var(--gray-50);
}

.hero-content h1 {
    font-size: 4rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    line-height: 1.2;
    background: linear-gradient(to right, var(--gray-50), var(--gray-400));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: gradientText 8s linear infinite;
}

.hero-text {
    font-size: 1.25rem;
    color: var(--gray-400);
    margin-bottom: 2rem;
}

/* Custom Buttons */
.button-group {
    display: flex;
    gap: 1rem;
}

.custom-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-weight: 500;
    transition: all 0.3s ease;
    text-decoration: none;
}

.custom-btn.primary {
    background: var(--gray-50);
    color: var(--gray-900);
}

.custom-btn.secondary {
    background: var(--gray-800);
    color: var(--gray-50);
    border: 1px solid var(--gray-700);
}

.custom-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
}

/* Browser Mockup */
.mockup-container {
    perspective: 1000px;
}

.browser-mockup {
    background: var(--gray-800);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0,0,0,0.25);
    transform: rotateY(-5deg);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.browser-header {
    background: var(--gray-700);
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.browser-actions {
    display: flex;
    gap: 6px;
}

.browser-actions span {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.browser-actions span:nth-child(1) { background: #ff5f57; }
.browser-actions span:nth-child(2) { background: #ffbd2e; }
.browser-actions span:nth-child(3) { background: #28c940; }

.browser-address {
    flex: 1;
    background: var(--gray-900);
    padding: 0.5rem 1rem;
    border-radius: 6px;
    color: var(--gray-400);
    font-size: 14px;
}

.browser-content {
    padding: 2rem;
    min-height: 400px;
}

.loading-element {
    height: 20px;
    background: var(--gray-700);
    border-radius: 4px;
    margin-bottom: 1rem;
    animation: pulse 2s infinite;
    transform-origin: left;
    transition: transform 0.3s ease;
}

.w-75 { width: 75%; }
.w-50 { width: 50%; }

/* Animations */
@keyframes sphereFloat {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(100px, 100px) rotate(90deg); }
    50% { transform: translate(200px, -100px) rotate(180deg); }
    75% { transform: translate(-100px, 100px) rotate(270deg); }
}

@keyframes pulse {
    0%, 100% { opacity: 0.3; }
    50% { opacity: 0.5; }
}

.animate-in {
    animation: fadeInUp 1s ease forwards;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Floating Elements */
.floating-element {
    position: absolute;
    opacity: 0.1;
    pointer-events: none;
    background: var(--gray-600);
}

.floating-element.square {
    width: 20px;
    height: 20px;
    animation: float linear infinite;
}

.floating-element.circle {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    animation: floatRotate linear infinite;
}

.floating-element.triangle {
    width: 0;
    height: 0;
    border-left: 15px solid transparent;
    border-right: 15px solid transparent;
    border-bottom: 25px solid var(--gray-600);
    animation: floatRotate linear infinite;
}

/* Loading Animation */
@keyframes loadingPulse {
    0% { 
        transform: scaleX(0.98);
        opacity: 0.3;
    }
    50% { 
        transform: scaleX(1);
        opacity: 0.5;
    }
    100% { 
        transform: scaleX(0.98);
        opacity: 0.3;
    }
}

/* Floating Animations */
@keyframes float {
    0% {
        transform: translate(0, 0);
    }
    25% {
        transform: translate(100px, 100px);
    }
    50% {
        transform: translate(200px, 0);
    }
    75% {
        transform: translate(100px, -100px);
    }
    100% {
        transform: translate(0, 0);
    }
}

@keyframes floatRotate {
    0% {
        transform: translate(0, 0) rotate(0deg);
    }
    25% {
        transform: translate(100px, 100px) rotate(90deg);
    }
    50% {
        transform: translate(200px, 0) rotate(180deg);
    }
    75% {
        transform: translate(100px, -100px) rotate(270deg);
    }
    100% {
        transform: translate(0, 0) rotate(360deg);
    }
}

/* Enhance existing animations */
.browser-mockup {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.loading-element {
    transform-origin: left;
    transition: transform 0.3s ease;
}

.hero-content h1 {
    animation: gradientText 8s linear infinite;
}

@keyframes gradientText {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const browserMockup = document.querySelector('.browser-mockup');
    const gradientBlob = document.querySelector('.gradient-blob');

    // Parallax effect on browser mockup
    document.addEventListener('mousemove', (e) => {
        if (window.innerWidth <= 991) return;

        const mouseX = (e.clientX / window.innerWidth - 0.5) * 20;
        const mouseY = (e.clientY / window.innerHeight - 0.5) * 20;

        browserMockup.style.transform = `
            perspective(1000px)
            rotateY(${mouseX}deg)
            rotateX(${-mouseY}deg)
            translateZ(50px)
        `;

        // Move gradient blob slightly with mouse
        gradientBlob.style.transform = `translate(
            ${mouseX * 2}px,
            ${mouseY * 2}px
        )`;
    });

    // Reset transform when mouse leaves
    document.addEventListener('mouseleave', () => {
        browserMockup.style.transform = 'rotateY(-5deg)';
    });

    // 3D Tilt Effect for Browser Mockup
    const mockup = document.querySelector('.browser-mockup');
    const mockupContainer = document.querySelector('.mockup-container');

    mockupContainer.addEventListener('mousemove', (e) => {
        const rect = mockupContainer.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 20;
        const rotateY = (centerX - x) / 20;

        mockup.style.transform = `
            perspective(1000px)
            rotateX(${rotateX}deg)
            rotateY(${-rotateY}deg)
            translateZ(50px)
            scale3d(1.02, 1.02, 1.02)
        `;
    });

    mockupContainer.addEventListener('mouseleave', () => {
        mockup.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateZ(0) scale3d(1, 1, 1)';
    });

    // Floating Elements Animation
    const createFloatingElements = () => {
        const container = document.querySelector('.animated-background');
        const elements = ['square', 'circle', 'triangle'];
        const count = 15;

        for (let i = 0; i < count; i++) {
            const element = document.createElement('div');
            element.className = `floating-element ${elements[Math.floor(Math.random() * elements.length)]}`;
            
            // Random positions and animations
            element.style.left = `${Math.random() * 100}%`;
            element.style.top = `${Math.random() * 100}%`;
            element.style.animationDelay = `${Math.random() * 5}s`;
            element.style.animationDuration = `${10 + Math.random() * 20}s`;
            
            container.appendChild(element);
        }
    };

    createFloatingElements();

    // Typing Animation for Hero Text
    const heroText = document.querySelector('.hero-text');
    const text = heroText.textContent;
    heroText.textContent = '';
    let charIndex = 0;

    const typeText = () => {
        if (charIndex < text.length) {
            heroText.textContent += text[charIndex];
            charIndex++;
            setTimeout(typeText, 50);
        }
    };

    typeText();

    // Scroll Animation for Loading Elements
    const loadingElements = document.querySelectorAll('.loading-element');
    
    const animateLoading = () => {
        loadingElements.forEach((element, index) => {
            element.style.animation = `loadingPulse 2s ${index * 0.2}s infinite`;
        });
    };

    animateLoading();

    // Interactive Grid Animation
    const grid = document.querySelector('.grid-overlay');
    
    document.addEventListener('mousemove', (e) => {
        const mouseX = e.clientX / window.innerWidth;
        const mouseY = e.clientY / window.innerHeight;
        
        grid.style.transform = `translate(${mouseX * 20}px, ${mouseY * 20}px)`;
    });
}); 